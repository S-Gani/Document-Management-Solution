// Accessing the data of Excel sheet from the project repository..

// Accessing the excel file from the project repository
  // const fetchProducts = async () => {
  //   try {
  //     const response = await fetch('\Book1.xlsx'); // Adjust the path
      // const file = await response.blob();
  //     const productList = await readExcelFile(file);
  //     setProducts(productList);
  //     saveProducts(productList);
  //   } catch (error) {
  //     console.error('Error reading Excel file:', error);
  //   }
  // };








// accessing the data from the local system by running the server with excel file
   const fetchProducts = async () => {
    try {
      const response = await fetch('http://localhost:8000/Book1.xlsx');
      if (!response.ok) {
        throw new Error('Failed to fetch products');
      }
      const arrayBuffer = await response.arrayBuffer();
      const data = new Uint8Array(arrayBuffer);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
      const parsedData = XLSX.utils.sheet_to_json(sheet);
      setProducts(parsedData);
    } catch (error) {
      console.error('Error fetching products:', error);
    }
  };
  











  // src/firebase.js
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";

// Your web app's Firebase configuration
const firebaseConfig = {
//   apiKey: "YOUR_API_KEY",
//   authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
//   projectId: "YOUR_PROJECT_ID",
//   storageBucket: "YOUR_PROJECT_ID.appspot.com",
//   messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
//   appId: "YOUR_APP_ID",
  apiKey: "AIzaSyA4QvLkeMdns4U0lN13MH2X1E8UnDuppQI",
  authDomain: "reactapp-9c93f.firebaseapp.com",
  projectId: "reactapp-9c93f",
  storageBucket: "reactapp-9c93f.appspot.com",
  messagingSenderId: "878525186065",
  appId: "1:878525186065:web:1f418619aa3268ac31f1b0",
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Initialize Firestore
const db = getFirestore(app);

// Initialize Firebase Authentication
const auth = getAuth(app);

export { db, auth };
















// src/components/SignUp.js
import React, { useState } from 'react';
import { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';

const SignUp = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const auth = getAuth();

  const handleSignUp = async (e) => {
    e.preventDefault();
    try {
      await createUserWithEmailAndPassword(auth, email, password);
      alert('User created successfully');
    } catch (error) {
      console.error('Error signing up:', error);
    }
  };

  return (
    <form onSubmit={handleSignUp}>
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
      />
      <button type="submit">Sign Up</button>
    </form>
  );
};

export default SignUp;














// src/components/SignIn.js
import React, { useState } from 'react';
import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';

const SignIn = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const auth = getAuth();

  const handleSignIn = async (e) => {
    e.preventDefault();
    try {
      await signInWithEmailAndPassword(auth, email, password);
      alert('Signed in successfully');
    } catch (error) {
      console.error('Error signing in:', error);
    }
  };

  return (
    <form onSubmit={handleSignIn}>
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
      />
      <button type="submit">Sign In</button>
    </form>
  );
};

export default SignIn;















productList



// import React, { useEffect, useState } from 'react';
// import axios from 'axios';
// import * as XLSX from 'xlsx';

// const ProductList = () => {
//   const [products, setProducts] = useState([]);

//   useEffect(() => {
//     const fetchData = async () => {
//       try {
//         const response = await axios.get('/C:\Users\sganesh\Desktop\Book1.xlsx', {
//           responseType: 'arraybuffer',
//         });
//         const data = new Uint8Array(response.data);
//         const workbook = XLSX.read(data, { type: 'array' });
//         const sheetName = workbook.SheetNames[0];
//         const worksheet = workbook.Sheets[sheetName];
//         const jsonData = XLSX.utils.sheet_to_json(worksheet);
//         setProducts(jsonData);
//       } catch (error) {
//         console.error('Error fetching and parsing Excel file', error);
//       }
//     };

//     fetchData();
//   }, []);

//   return (
//     <div>
//       <h1>Product List</h1>
//       <table>
//         <thead>
//           <tr>
//             <th>ID</th>
//             <th>Name</th>
//             <th>Stock</th>
//             <th>Price</th>
//             <th>Description</th>
//           </tr>
//         </thead>
//         <tbody>
//           {products.map((product, index) => (
//             <tr key={index}>
//               <td>{product.id}</td>
//               <td>{product.name}</td>
//               <td>{product.stock}</td>
//               <td>{product.price}</td>
//               <td>{product.description}</td>
//             </tr>
//           ))}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default ProductList;















admin.js

// import React, { useState } from 'react';
// import { Link } from 'react-router-dom';
// import ProductList from './ProductList';
// import './Admin.css'; // Import your custom CSS for styling
// import homeLogo from './home-logo.png'; // Make sure you have a home-logo.png in your project
// import userIcon from './user-icon.png'; // Make sure you have a user-icon.png in your project
// import { utils, writeFile } from 'xlsx';
// import fs from 'fs'; // Import Node.js file system module
// import path from 'path'; // Import path module for file paths


// function Admin({ products, updateProducts, totalSales }) {
//   const minStockThreshold = 5;
//   const lowStockProducts = products.filter((product) => product.stock <= minStockThreshold);
//   const [showAddStockPopup, setShowAddStockPopup] = useState(false);
//   const [selectedProduct, setSelectedProduct] = useState(null);
//   const [quantity, setQuantity] = useState(0);
//   const [selectedDate, setSelectedDate] = useState('');
//   const [salesData, setSalesData] = useState([]);
//   const [showProfile, setShowProfile] = useState(false);
//   const [showAddProductForm, setShowAddProductForm] = useState(false); // State for showing the add product form

//   const handleAddStockClick = (product) => {
//     setSelectedProduct(product);
//     setShowAddStockPopup(true);
//   };


//   // adding data into the new sheet.
//   const [formData, setFormData] = useState({
//     productName: '',
//     productDescription: '',
//     productStock: 0,
//     productPrice: 0,
//     productImage: '',
//   });

//   const handleAddStock = () => {
//     if (selectedProduct && quantity > 0) {
//       const updatedProducts = products.map((product) =>
//         product.id === selectedProduct.id
//           ? { ...product, stock: product.stock + parseInt(quantity, 10) }
//           : product
//       );
//       updateProducts(updatedProducts);
//     }
//     setShowAddStockPopup(false);
//     setSelectedProduct(null);
//     setQuantity(0);
//   };

//   const toggleAddProductForm = () => {
//     setShowAddProductForm(!showAddProductForm);
//   };


//   const handleInputChange = (e) => {
//     const { name, value } = e.target;
//     setFormData({ ...formData, [name]: value });
//   };

//   const handleAddProductSubmit = (e) => {
//     e.preventDefault();

//     // Extract data from form data
//     const { productName, productDescription, productStock, productPrice, productImage } = formData;

//     // Create new product object
//     const newProduct = {
//       id: products.length + 1, // Generate new ID (you may need a more robust ID generation)
//       name: productName,
//       description: productDescription,
//       stock: parseInt(productStock),
//       price: parseFloat(productPrice),
//       image: productImage,
//     };

//     // Read existing data from Data.json (assuming it's an array of products)
//     const dataFilePath = path.join(__dirname, 'public', 'data', 'Data.json'); // Adjust path as per your project structure
//     const jsonData = JSON.parse(fs.readFileSync(dataFilePath, 'utf8'));

//     // Append new product to existing data
//     jsonData.push(newProduct);

//     // Write updated data back to Data.json
//     fs.writeFileSync(dataFilePath, JSON.stringify(jsonData, null, 2));

//     // Optional: Reset form data after submission
//     setFormData({
//       productName: '',
//       productDescription: '',
//       productStock: 0,
//       productPrice: 0,
//       productImage: '',
//     });

//     // Close add product form
//     setShowAddProductForm(false);
//   };

//   // const handleAddProductSubmit = (e) => {
//   //   e.preventDefault();
//   //   const formData = new FormData(e.target);
//   //   const newProduct = {
//   //     id: products.length + 1,
//   //     name: formData.get('productName'),
//   //     description: formData.get('productDescription'),
//   //     stock: parseInt(formData.get('productStock'), 10),
//   //     price: parseFloat(formData.get('productPrice')),
//   //   };


//   //   const updatedProducts = [...products, newProduct];
//   //   updateProducts(updatedProducts);
//   //   setShowAddProductForm(false); // Close the form after submission
//   // };

//   const handleDateChange = (e) => {
//     setSelectedDate(e.target.value);
//     // Simulated sales data for the selected date, replace with actual data retrieval logic
//     setSalesData([
//       { id: 1, name: 'Product 1', amount: 100, stockSold: 1 },
//       // { id: 2, name: 'Product 2', amount: 150, stockSold: 3 },
//     ]);
//   };

//   return (
//     <div className="admin-page">
//       <header className="admin-header">
//         <Link to="/" className="home-button">
//           <img src={homeLogo} alt="Home" />
//         </Link>
//         <h1>Admin Dashboard</h1>
//         <img 
//           src={userIcon} 
//           alt="User" 
//           className="user-icon" 
//           onClick={() => setShowProfile(!showProfile)} 
//         />
//         <h2>Total Sales: ₹{totalSales}</h2>
//       </header>
//       <div className={`admin-profile-sidebar ${showProfile ? 'open' : ''}`}>
//         <h2>Admin Profile</h2>
//         <p>Admin_Name</p>
//         <p>+91 911XXXXXXX</p>
//         <button onClick={() => setShowProfile(false)}>Close</button>
//       </div>
//       <div className="admin-content">
//         <section className="low-stock">
//           <h2>Low Stock Alert</h2>
//           {lowStockProducts.length > 0 ? (
//             <ul>
//               {lowStockProducts.map((product) => (
//                 <li key={product.id} className="low-stock-product">
//                   <img src={product.image} alt={product.name} className="product-image" />
//                   <br></br>
//                   <div className="product-details">
//                     <p className="product-name">{product.name}</p>
//                     <p className="product-stock">Stock is low: {product.stock} remaining</p>
//                     <button className="add-stock-button" onClick={() => handleAddStockClick(product)}>Add Stock</button>
//                   </div>
//                 </li>
//               ))}
//             </ul>
//           ) : (
//             <p>No low stock products</p>
//           )}
//         </section>

//         <section className="saless">
//           <div className="container">
//             <div className="add-product">
//               <h2>Add Product</h2>
//               <button className="add-product-button" onClick={toggleAddProductForm}>
//                 Add Product
//               </button>
//             </div>
//             <div className="sales">
//               {/* Sales Section */}
//               <h2>Sales</h2>
//               <label htmlFor="date">Select Date:</label>
//               <input
//                 type="date"
//                 id="date"
//                 value={selectedDate}
//                 onChange={handleDateChange}
//               /><br></br>
//               {salesData.length > 0 ? (
//                 <ul>
//                   {salesData.map((sale) => (
//                     <li key={sale.id}>
//                       Total Sales: ₹{totalSales}
//                       <br></br>
//                       Quantity Sold: {sale.stockSold}
//                     </li>
//                   ))}
//                 </ul> 
//               ) : (
//                 <p>No sales data for selected date</p>
//               )}
//             </div>
//           </div>
//         </section>
//         <section className="all-products">
//           <h2>All Products</h2>
//           <ProductList products={products} isAdmin />
//         </section>
//       </div>
//       {/* Add Product Modal */}
//       <div className={`modal ${showAddProductForm ? 'show' : ''}`} onClick={toggleAddProductForm}>
//         <div className="modal-content" onClick={(e) => e.stopPropagation()}>
//           <span className="close" onClick={toggleAddProductForm}>&times;</span>
//           <h2>Add Product</h2>
//           {/* <form onSubmit={handleAddProductSubmit}>
//             <label htmlFor="productName">Product Name:</label>
//             <input
//               type="text"
//               id="productName"
//               name="productName"
//               required
//             /><br />
//             <label htmlFor="productDescription">Description:</label>
//             <textarea
//               id="productDescription"
//               name="productDescription"
//               required
//             ></textarea><br />
//             <label htmlFor="productStock">Stock:</label>
//             <input
//               type="number"
//               id="productStock"
//               name="productStock"
//               required
//             /><br />
//             <label htmlFor="productPrice">Price:</label>
//             <input
//               type="number"
//               id="productPrice"
//               name="productPrice"
//               required
//             /><br />
//              <label htmlFor="productImage">Product Image:</label>
//             <input
//               type="text"
//               id="productImage"
//               name="productImage"
//               required
//             /><br />
//             <button type="submit" className='subm'>Submit</button>
//           </form> */}
//           <form onSubmit={handleAddProductSubmit}>
//         <label htmlFor="productName">Product Name:</label>
//         <input
//           type="text"
//           id="productName"
//           name="productName"
//           value={formData.productName}
//           onChange={handleInputChange}
//           required
//         /><br />
//         <label htmlFor="productDescription">Description:</label>
//         <textarea
//           id="productDescription"
//           name="productDescription"
//           value={formData.productDescription}
//           onChange={handleInputChange}
//           required
//         ></textarea><br />
//         <label htmlFor="productStock">Stock:</label>
//         <input
//           type="number"
//           id="productStock"
//           name="productStock"
//           value={formData.productStock}
//           onChange={handleInputChange}
//           required
//         /><br />
//         <label htmlFor="productPrice">Price:</label>
//         <input
//           type="number"
//           id="productPrice"
//           name="productPrice"
//           value={formData.productPrice}
//           onChange={handleInputChange}
//           required
//         /><br />
//         <label htmlFor="productImage">Product Image URL:</label>
//         <input
//           type="text"
//           id="productImage"
//           name="productImage"
//           value={formData.productImage}
//           onChange={handleInputChange}
//           required
//         /><br />
//         <button type="submit" className="add-product-button">Submit</button>
//       </form>
//         </div>
//       </div>

//     {showAddStockPopup && (
//   <div className="popup">
//     <div className="popup-content">
//       <p>Enter quantity to add for {selectedProduct.name}:</p>
//       <input
//         type="number"
//         value={quantity}
//         onChange={(e) => setQuantity(e.target.value)}
//         min="1"
//         className='quanipfield'
//       />
//       <button onClick={handleAddStock}>Add Stock</button>
//       <button onClick={() => setShowAddStockPopup(false)}>Cancel</button>
//     </div>
//   </div>
// )}

//     </div>
//   );
// }

// export default Admin;